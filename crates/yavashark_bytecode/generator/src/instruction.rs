use crate::set;
use quote::quote;
use syn::punctuated::Punctuated;
use syn::{Field, FieldMutability, Fields, FieldsUnnamed, Variant, Visibility};

pub fn generate_instruction_enum() {
    let instructions = set::instructions();

    let mut variants = Vec::new();

    for inst in instructions {
        let fields = if inst.inputs.is_empty() && inst.output.is_none() {
            Fields::Unit
        } else {
            let iter = inst.inputs.iter().map(|input| Field {
                attrs: Vec::new(),
                vis: Visibility::Inherited,
                mutability: FieldMutability::None,
                ident: None,
                colon_token: None,
                ty: input.to_syn(),
            });

            let iter = iter.chain(inst.output.iter().map(|output| Field {
                attrs: Vec::new(),
                vis: Visibility::Inherited,
                mutability: FieldMutability::None,
                ident: None,
                colon_token: None,
                ty: output.to_syn(),
            }));

            Fields::Unnamed(FieldsUnnamed {
                paren_token: Default::default(),
                unnamed: Punctuated::from_iter(iter),
            })
        };

        variants.push(Variant {
            attrs: Vec::new(),
            ident: syn::Ident::new(&inst.name, proc_macro2::Span::call_site()),
            fields,
            discriminant: None,
        })
    }

    let output = quote! {
        #[derive(Debug, Clone, Copy, PartialEq)]
        pub enum Instruction {
            #(#variants),*
        }
    };

    let file = syn::File {
        shebang: None,
        attrs: Vec::new(),
        items: vec![syn::parse2(output).unwrap()],
    };

    let header = r#"// This file is automatically @generated by yavashark/generator.
// It is not intended for manual editing.
#![allow(warnings)]
#![allow(unknown_lints)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use crate::data::{Acc, ConstIdx, Reg, Stack, VarName, Label, ControlIdx, F32, I32, U32, Boolean, Null, Undefined};
use crate::{JmpOffset, JmpAddr}; 



"#;

    let code = prettyplease::unparse(&file);

    let out = format!("{}{}", header, code);

    std::fs::write("crates/yavashark_bytecode/src/instructions.rs", out).unwrap();
}
