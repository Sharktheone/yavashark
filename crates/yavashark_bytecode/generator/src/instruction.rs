use quote::quote;
use crate::parse;


#[derive(Debug, Clone, Copy)]
enum ArgumentType {
    Variable,
    Reg,
    Acc,
    Stack,
    Const,
}

impl ArgumentType {
    const NUM_TYPES: usize = 5;
}


#[derive(Debug, Clone, Copy)]
enum ReturnType {
    Variable,
    Reg,
    Acc,
    Stack,
}

impl ReturnType {
    const NUM_TYPES: usize = 4;
}

#[derive(Debug, Clone)]
struct InstructionVariant {
    name: String,
    inputs: Vec<ArgumentType>,
    output: Option<ReturnType>,
}


pub fn generate_instruction_enum() {
    let instructions = parse::instruction_def();


    let mut output = quote! {
        // This file is automatically @generated by yavashark/generator.
        // It is not intended for manual editing.
    };


    // let mut variants = Vec::new();

    for inst in instructions {
        
    }





    println!("{}", output);
}