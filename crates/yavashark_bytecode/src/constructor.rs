// This file is automatically @generated by yavashark/generator.
// It is not intended for manual editing.
#![allow(clippy::missing_const_for_fn, clippy::cognitive_complexity)]


use crate::data::{Data, DataType, OutputData, OutputDataType};
use crate::{JmpOffset, JmpAddr}; 
use crate::instructions::Instruction; 


impl Instruction {
    #[must_use]
    pub fn add(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn sub(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn mul(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn div(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn mod_(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn l_not(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotConstToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotConstToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotStackToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotStackToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotVarToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn l_or(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn l_and(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn b_xor(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn b_or(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn b_and(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn eq(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn ne(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn strict_eq(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn strict_ne(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn lt(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn lt_eq(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn gt(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn gt_eq(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn l_shift(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn r_shift(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn zero_fill_r_shift(
        arg0: impl Data,
        arg1: impl Data,
        output: impl OutputData,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn in_(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn instance_of(
        arg0: impl Data,
        arg1: impl Data,
        output: impl OutputData,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn exp(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn nullish_coalescing(
        arg0: impl Data,
        arg1: impl Data,
        output: impl OutputData,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn dec(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecConstToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecConstToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecStackToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecStackToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecVarToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn inc(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncConstToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncConstToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncStackToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncStackToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncVarToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn push_scope() -> Self {
        Self::PushScope
    }
    #[must_use]
    pub fn pop_scope() -> Self {
        Self::PopScope
    }
    #[must_use]
    pub fn call(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallConstToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallConstToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallStackToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallStackToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallVarToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn call_member(
        arg0: impl Data,
        arg1: impl Data,
        output: impl OutputData,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn push_call(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::PushCallAcc(arg0),
            DataType::Const(arg0) => Self::PushCallConst(arg0),
            DataType::Reg(arg0) => Self::PushCallReg(arg0),
            DataType::Stack(arg0) => Self::PushCallStack(arg0),
            DataType::Var(arg0) => Self::PushCallVar(arg0),
        }
    }
    #[must_use]
    pub fn spread_call(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::SpreadCallAcc(arg0),
            DataType::Const(arg0) => Self::SpreadCallConst(arg0),
            DataType::Reg(arg0) => Self::SpreadCallReg(arg0),
            DataType::Stack(arg0) => Self::SpreadCallStack(arg0),
            DataType::Var(arg0) => Self::SpreadCallVar(arg0),
        }
    }
    #[must_use]
    pub fn jmp(arg0: JmpAddr) -> Self {
        Self::Jmp(arg0)
    }
    #[must_use]
    pub fn jmp_if(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_null(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNullAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNullConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNullReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNullStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNullVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_null(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotNullAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotNullConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotNullReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotNullStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotNullVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_undefined(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfUndefinedAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfUndefinedConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfUndefinedReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfUndefinedStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfUndefinedVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_undefined(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotUndefinedAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotUndefinedConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotUndefinedReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotUndefinedStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotUndefinedVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_nullish(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNullishAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNullishConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNullishReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNullishStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNullishVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_nullish(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotNullishAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotNullishConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotNullishReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotNullishStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotNullishVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_rel(arg0: JmpOffset) -> Self {
        Self::JmpRel(arg0)
    }
    #[must_use]
    pub fn jmp_if_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfRelVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotRelVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_null_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNullRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNullRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNullRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNullRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNullRelVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_null_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotNullRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotNullRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotNullRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotNullRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotNullRelVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_undefined_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfUndefinedRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfUndefinedRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfUndefinedRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfUndefinedRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfUndefinedRelVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_undefined_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotUndefinedRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotUndefinedRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotUndefinedRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotUndefinedRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotUndefinedRelVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_nullish_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNullishRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNullishRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNullishRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNullishRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNullishRelVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_nullish_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotNullishRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotNullishRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotNullishRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotNullishRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotNullishRelVar(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_eq(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_ne(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_strict_eq(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqAccConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqAccStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRegConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRegStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqVarConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqVarStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_strict_ne(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeAccConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeAccStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRegConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRegStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeVarConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeVarStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_lt(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_lt_eq(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_gt(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_gt_eq(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_eq_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_ne_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_strict_eq_rel(
        arg0: impl Data,
        arg1: impl Data,
        arg2: JmpOffset,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelAccConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelAccStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRelAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictEqRelConstAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictEqRelConstReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictEqRelConstVar(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelRegConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelRegStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRelRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictEqRelStackAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictEqRelStackReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictEqRelStackVar(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelVarConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelVarStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRelVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_strict_ne_rel(
        arg0: impl Data,
        arg1: impl Data,
        arg2: JmpOffset,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelAccConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelAccStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRelAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictNeRelConstAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictNeRelConstReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictNeRelConstVar(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelRegConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelRegStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRelRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictNeRelStackAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictNeRelStackReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictNeRelStackVar(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelVarConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelVarStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRelVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_lt_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_lt_eq_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRelAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfLtEqRelConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfLtEqRelConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfLtEqRelConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRelRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfLtEqRelStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfLtEqRelStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfLtEqRelStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRelVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_gt_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_gt_eq_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRelAccVar(arg0, arg1, arg2),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfGtEqRelConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfGtEqRelConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfGtEqRelConstVar(arg0, arg1, arg2),
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRelRegVar(arg0, arg1, arg2),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfGtEqRelStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfGtEqRelStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfGtEqRelStackVar(arg0, arg1, arg2),
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRelVarVar(arg0, arg1, arg2),
                }
            }
        }
    }
    #[must_use]
    pub fn load_member(
        arg0: impl Data,
        arg1: impl Data,
        output: impl OutputData,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn load_var(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarConstToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarStackToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarVarToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn type_of(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::TypeOfAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::TypeOfAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfConstToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::TypeOfConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::TypeOfConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::TypeOfRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::TypeOfRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfStackToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::TypeOfStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::TypeOfStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::TypeOfVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::TypeOfVarToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn push(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::PushAcc(arg0),
            DataType::Const(arg0) => Self::PushConst(arg0),
            DataType::Reg(arg0) => Self::PushReg(arg0),
            DataType::Stack(arg0) => Self::PushStack(arg0),
            DataType::Var(arg0) => Self::PushVar(arg0),
        }
    }
    #[must_use]
    pub fn pop() -> Self {
        Self::Pop
    }
    #[must_use]
    pub fn pop_n(arg0: u32) -> Self {
        Self::PopN(arg0)
    }
    #[must_use]
    pub fn pop_to(output: impl OutputData) -> Self {
        match output.data_type() {
            OutputDataType::Acc(output) => Self::PopToToAcc(output),
            OutputDataType::Reg(output) => Self::PopToToReg(output),
            OutputDataType::Stack(output) => Self::PopToToStack(output),
            OutputDataType::Var(output) => Self::PopToToVar(output),
        }
    }
    #[must_use]
    pub fn move_(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveConstToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveConstToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveStackToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveStackToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveVarToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn return_() -> Self {
        Self::Return
    }
    #[must_use]
    pub fn return_value(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::ReturnValueAcc(arg0),
            DataType::Const(arg0) => Self::ReturnValueConst(arg0),
            DataType::Reg(arg0) => Self::ReturnValueReg(arg0),
            DataType::Stack(arg0) => Self::ReturnValueStack(arg0),
            DataType::Var(arg0) => Self::ReturnValueVar(arg0),
        }
    }
    #[must_use]
    pub fn throw(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::ThrowAcc(arg0),
            DataType::Const(arg0) => Self::ThrowConst(arg0),
            DataType::Reg(arg0) => Self::ThrowReg(arg0),
            DataType::Stack(arg0) => Self::ThrowStack(arg0),
            DataType::Var(arg0) => Self::ThrowVar(arg0),
        }
    }
    #[must_use]
    pub fn this(output: impl OutputData) -> Self {
        match output.data_type() {
            OutputDataType::Acc(output) => Self::ThisToAcc(output),
            OutputDataType::Reg(output) => Self::ThisToReg(output),
            OutputDataType::Stack(output) => Self::ThisToStack(output),
            OutputDataType::Var(output) => Self::ThisToVar(output),
        }
    }
}
