// This file is automatically @generated by yavashark/generator.
// It is not intended for manual editing.
#![allow(clippy::missing_const_for_fn, clippy::cognitive_complexity)]
#![allow(unknown_lints)]
#![allow(warnings)]
#![cfg_attr(rustfmt, rustfmt_skip)]


use crate::data::{Data, DataType, OutputData, OutputDataType, Label, ControlIdx, VarName};
use crate::{JmpOffset, JmpAddr}; 
use crate::instructions::Instruction; 


impl Instruction {
    #[must_use]
    pub fn add(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::AddUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::AddUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::AddUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::AddUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn sub(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::SubUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::SubUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::SubUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::SubUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn mul(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::MulUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::MulUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::MulUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::MulUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn div(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::DivUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::DivUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::DivUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::DivUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn mod_(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ModUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ModUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ModUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ModUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn l_not(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotConstToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotConstToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotStackToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotStackToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotF32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotI32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotU32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotBoolToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotNullToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::LNotNullToStack(arg0, output),
                    OutputDataType::Var(output) => Self::LNotNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LNotUndefinedToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LNotUndefinedToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LNotUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LNotUndefinedToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn l_or(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LOrUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LOrUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LOrUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LOrUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn l_and(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LAndUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LAndUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LAndUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LAndUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn b_xor(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BXorUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BXorUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BXorUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BXorUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn b_or(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BOrUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BOrUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BOrUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BOrUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn b_and(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::BAndUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::BAndUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::BAndUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::BAndUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn eq(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::EqUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::EqUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::EqUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::EqUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn ne(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NeUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NeUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NeUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NeUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn strict_eq(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictEqUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictEqUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictEqUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictEqUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn strict_ne(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::StrictNeUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::StrictNeUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::StrictNeUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::StrictNeUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn lt(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn lt_eq(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LtEqUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LtEqUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LtEqUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LtEqUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn gt(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn gt_eq(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::GtEqUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::GtEqUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::GtEqUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::GtEqUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn l_shift(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LShiftUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LShiftUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LShiftUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LShiftUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn r_shift(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::RShiftUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::RShiftUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::RShiftUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::RShiftUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn zero_fill_r_shift(
        arg0: impl Data,
        arg1: impl Data,
        output: impl OutputData,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftConstUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftStackUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedConstToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedStackToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ZeroFillRShiftUndefinedUndefinedToAcc(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Reg(output) => {
                                Self::ZeroFillRShiftUndefinedUndefinedToReg(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Stack(output) => {
                                Self::ZeroFillRShiftUndefinedUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::ZeroFillRShiftUndefinedUndefinedToVar(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn in_(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn instance_of(
        arg0: impl Data,
        arg1: impl Data,
        output: impl OutputData,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::InstanceOfUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::InstanceOfUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::InstanceOfUndefinedUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::InstanceOfUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn exp(arg0: impl Data, arg1: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::ExpUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::ExpUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::ExpUndefinedUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::ExpUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn nullish_coalescing(
        arg0: impl Data,
        arg1: impl Data,
        output: impl OutputData,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingAccUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingConstUndefinedToAcc(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingConstUndefinedToReg(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingConstUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingConstUndefinedToVar(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingRegUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingStackUndefinedToAcc(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingStackUndefinedToReg(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingStackUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingStackUndefinedToVar(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingVarUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingF32UndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingI32UndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingU32UndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingBoolUndefinedToAcc(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingBoolUndefinedToReg(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingBoolUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingBoolUndefinedToVar(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingNullUndefinedToAcc(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingNullUndefinedToReg(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingNullUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingNullUndefinedToVar(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedAccToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedConstToAcc(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedConstToReg(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedConstToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedConstToVar(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedRegToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedStackToAcc(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedStackToReg(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedStackToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedStackToVar(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedVarToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedF32ToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedI32ToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedU32ToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedBoolToAcc(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedBoolToReg(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedBoolToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedBoolToVar(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedNullToAcc(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedNullToReg(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedNullToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedNullToVar(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::NullishCoalescingUndefinedUndefinedToAcc(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Reg(output) => {
                                Self::NullishCoalescingUndefinedUndefinedToReg(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Stack(output) => {
                                Self::NullishCoalescingUndefinedUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::NullishCoalescingUndefinedUndefinedToVar(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn dec(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecConstToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecConstToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecStackToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecStackToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecF32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecI32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecU32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecBoolToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecNullToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::DecNullToStack(arg0, output),
                    OutputDataType::Var(output) => Self::DecNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DecUndefinedToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DecUndefinedToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::DecUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::DecUndefinedToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn inc(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncConstToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncConstToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncStackToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncStackToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncF32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncI32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncU32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncBoolToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncNullToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::IncNullToStack(arg0, output),
                    OutputDataType::Var(output) => Self::IncNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::IncUndefinedToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::IncUndefinedToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::IncUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::IncUndefinedToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn push_scope() -> Self {
        Self::PushScope
    }
    #[must_use]
    pub fn pop_scope() -> Self {
        Self::PopScope
    }
    #[must_use]
    pub fn call(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallConstToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallConstToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallStackToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallStackToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallF32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallI32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallU32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallBoolToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallNullToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::CallNullToStack(arg0, output),
                    OutputDataType::Var(output) => Self::CallNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::CallUndefinedToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::CallUndefinedToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::CallUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::CallUndefinedToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn call_no_output(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::CallNoOutputAcc(arg0),
            DataType::Const(arg0) => Self::CallNoOutputConst(arg0),
            DataType::Reg(arg0) => Self::CallNoOutputReg(arg0),
            DataType::Stack(arg0) => Self::CallNoOutputStack(arg0),
            DataType::Var(arg0) => Self::CallNoOutputVar(arg0),
            DataType::F32(arg0) => Self::CallNoOutputF32(arg0),
            DataType::I32(arg0) => Self::CallNoOutputI32(arg0),
            DataType::U32(arg0) => Self::CallNoOutputU32(arg0),
            DataType::Boolean(arg0) => Self::CallNoOutputBool(arg0),
            DataType::Null(arg0) => Self::CallNoOutputNull(arg0),
            DataType::Undefined(arg0) => Self::CallNoOutputUndefined(arg0),
        }
    }
    #[must_use]
    pub fn call_member(
        arg0: impl Data,
        arg1: impl Data,
        output: impl OutputData,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::CallMemberUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::CallMemberUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::CallMemberUndefinedUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::CallMemberUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn call_member_no_output(arg0: impl Data, arg1: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::CallMemberNoOutputAccAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::CallMemberNoOutputAccConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::CallMemberNoOutputAccReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::CallMemberNoOutputAccStack(arg0, arg1),
                    DataType::Var(arg1) => Self::CallMemberNoOutputAccVar(arg0, arg1),
                    DataType::F32(arg1) => Self::CallMemberNoOutputAccF32(arg0, arg1),
                    DataType::I32(arg1) => Self::CallMemberNoOutputAccI32(arg0, arg1),
                    DataType::U32(arg1) => Self::CallMemberNoOutputAccU32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputAccBool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::CallMemberNoOutputAccNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputAccUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::CallMemberNoOutputConstAcc(arg0, arg1),
                    DataType::Const(arg1) => {
                        Self::CallMemberNoOutputConstConst(arg0, arg1)
                    }
                    DataType::Reg(arg1) => Self::CallMemberNoOutputConstReg(arg0, arg1),
                    DataType::Stack(arg1) => {
                        Self::CallMemberNoOutputConstStack(arg0, arg1)
                    }
                    DataType::Var(arg1) => Self::CallMemberNoOutputConstVar(arg0, arg1),
                    DataType::F32(arg1) => Self::CallMemberNoOutputConstF32(arg0, arg1),
                    DataType::I32(arg1) => Self::CallMemberNoOutputConstI32(arg0, arg1),
                    DataType::U32(arg1) => Self::CallMemberNoOutputConstU32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputConstBool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::CallMemberNoOutputConstNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputConstUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::CallMemberNoOutputRegAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::CallMemberNoOutputRegConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::CallMemberNoOutputRegReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::CallMemberNoOutputRegStack(arg0, arg1),
                    DataType::Var(arg1) => Self::CallMemberNoOutputRegVar(arg0, arg1),
                    DataType::F32(arg1) => Self::CallMemberNoOutputRegF32(arg0, arg1),
                    DataType::I32(arg1) => Self::CallMemberNoOutputRegI32(arg0, arg1),
                    DataType::U32(arg1) => Self::CallMemberNoOutputRegU32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputRegBool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::CallMemberNoOutputRegNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputRegUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::CallMemberNoOutputStackAcc(arg0, arg1),
                    DataType::Const(arg1) => {
                        Self::CallMemberNoOutputStackConst(arg0, arg1)
                    }
                    DataType::Reg(arg1) => Self::CallMemberNoOutputStackReg(arg0, arg1),
                    DataType::Stack(arg1) => {
                        Self::CallMemberNoOutputStackStack(arg0, arg1)
                    }
                    DataType::Var(arg1) => Self::CallMemberNoOutputStackVar(arg0, arg1),
                    DataType::F32(arg1) => Self::CallMemberNoOutputStackF32(arg0, arg1),
                    DataType::I32(arg1) => Self::CallMemberNoOutputStackI32(arg0, arg1),
                    DataType::U32(arg1) => Self::CallMemberNoOutputStackU32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputStackBool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::CallMemberNoOutputStackNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputStackUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::CallMemberNoOutputVarAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::CallMemberNoOutputVarConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::CallMemberNoOutputVarReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::CallMemberNoOutputVarStack(arg0, arg1),
                    DataType::Var(arg1) => Self::CallMemberNoOutputVarVar(arg0, arg1),
                    DataType::F32(arg1) => Self::CallMemberNoOutputVarF32(arg0, arg1),
                    DataType::I32(arg1) => Self::CallMemberNoOutputVarI32(arg0, arg1),
                    DataType::U32(arg1) => Self::CallMemberNoOutputVarU32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputVarBool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::CallMemberNoOutputVarNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputVarUndefined(arg0, arg1)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::CallMemberNoOutputF32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::CallMemberNoOutputF32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::CallMemberNoOutputF32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::CallMemberNoOutputF32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::CallMemberNoOutputF32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::CallMemberNoOutputF32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::CallMemberNoOutputF32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::CallMemberNoOutputF32U32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputF32Bool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::CallMemberNoOutputF32Null(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputF32Undefined(arg0, arg1)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::CallMemberNoOutputI32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::CallMemberNoOutputI32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::CallMemberNoOutputI32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::CallMemberNoOutputI32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::CallMemberNoOutputI32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::CallMemberNoOutputI32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::CallMemberNoOutputI32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::CallMemberNoOutputI32U32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputI32Bool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::CallMemberNoOutputI32Null(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputI32Undefined(arg0, arg1)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::CallMemberNoOutputU32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::CallMemberNoOutputU32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::CallMemberNoOutputU32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::CallMemberNoOutputU32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::CallMemberNoOutputU32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::CallMemberNoOutputU32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::CallMemberNoOutputU32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::CallMemberNoOutputU32U32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputU32Bool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::CallMemberNoOutputU32Null(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputU32Undefined(arg0, arg1)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::CallMemberNoOutputBoolAcc(arg0, arg1),
                    DataType::Const(arg1) => {
                        Self::CallMemberNoOutputBoolConst(arg0, arg1)
                    }
                    DataType::Reg(arg1) => Self::CallMemberNoOutputBoolReg(arg0, arg1),
                    DataType::Stack(arg1) => {
                        Self::CallMemberNoOutputBoolStack(arg0, arg1)
                    }
                    DataType::Var(arg1) => Self::CallMemberNoOutputBoolVar(arg0, arg1),
                    DataType::F32(arg1) => Self::CallMemberNoOutputBoolF32(arg0, arg1),
                    DataType::I32(arg1) => Self::CallMemberNoOutputBoolI32(arg0, arg1),
                    DataType::U32(arg1) => Self::CallMemberNoOutputBoolU32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputBoolBool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::CallMemberNoOutputBoolNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputBoolUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::CallMemberNoOutputNullAcc(arg0, arg1),
                    DataType::Const(arg1) => {
                        Self::CallMemberNoOutputNullConst(arg0, arg1)
                    }
                    DataType::Reg(arg1) => Self::CallMemberNoOutputNullReg(arg0, arg1),
                    DataType::Stack(arg1) => {
                        Self::CallMemberNoOutputNullStack(arg0, arg1)
                    }
                    DataType::Var(arg1) => Self::CallMemberNoOutputNullVar(arg0, arg1),
                    DataType::F32(arg1) => Self::CallMemberNoOutputNullF32(arg0, arg1),
                    DataType::I32(arg1) => Self::CallMemberNoOutputNullI32(arg0, arg1),
                    DataType::U32(arg1) => Self::CallMemberNoOutputNullU32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputNullBool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::CallMemberNoOutputNullNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputNullUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::CallMemberNoOutputUndefinedAcc(arg0, arg1)
                    }
                    DataType::Const(arg1) => {
                        Self::CallMemberNoOutputUndefinedConst(arg0, arg1)
                    }
                    DataType::Reg(arg1) => {
                        Self::CallMemberNoOutputUndefinedReg(arg0, arg1)
                    }
                    DataType::Stack(arg1) => {
                        Self::CallMemberNoOutputUndefinedStack(arg0, arg1)
                    }
                    DataType::Var(arg1) => {
                        Self::CallMemberNoOutputUndefinedVar(arg0, arg1)
                    }
                    DataType::F32(arg1) => {
                        Self::CallMemberNoOutputUndefinedF32(arg0, arg1)
                    }
                    DataType::I32(arg1) => {
                        Self::CallMemberNoOutputUndefinedI32(arg0, arg1)
                    }
                    DataType::U32(arg1) => {
                        Self::CallMemberNoOutputUndefinedU32(arg0, arg1)
                    }
                    DataType::Boolean(arg1) => {
                        Self::CallMemberNoOutputUndefinedBool(arg0, arg1)
                    }
                    DataType::Null(arg1) => {
                        Self::CallMemberNoOutputUndefinedNull(arg0, arg1)
                    }
                    DataType::Undefined(arg1) => {
                        Self::CallMemberNoOutputUndefinedUndefined(arg0, arg1)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn call_super(output: impl OutputData) -> Self {
        match output.data_type() {
            OutputDataType::Acc(output) => Self::CallSuperToAcc(output),
            OutputDataType::Reg(output) => Self::CallSuperToReg(output),
            OutputDataType::Stack(output) => Self::CallSuperToStack(output),
            OutputDataType::Var(output) => Self::CallSuperToVar(output),
        }
    }
    #[must_use]
    pub fn call_super_no_output() -> Self {
        Self::CallSuperNoOutput
    }
    #[must_use]
    pub fn construct(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ConstructAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ConstructAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ConstructAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ConstructAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ConstructConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ConstructConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ConstructConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ConstructConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ConstructRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ConstructRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ConstructRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ConstructRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ConstructStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ConstructStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ConstructStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ConstructStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ConstructVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ConstructVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ConstructVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ConstructVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ConstructF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ConstructF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ConstructF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ConstructF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ConstructI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ConstructI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ConstructI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ConstructI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ConstructU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ConstructU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ConstructU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ConstructU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ConstructBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ConstructBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ConstructBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ConstructBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ConstructNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ConstructNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ConstructNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ConstructNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ConstructUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ConstructUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ConstructUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ConstructUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn construct_no_output(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::ConstructNoOutputAcc(arg0),
            DataType::Const(arg0) => Self::ConstructNoOutputConst(arg0),
            DataType::Reg(arg0) => Self::ConstructNoOutputReg(arg0),
            DataType::Stack(arg0) => Self::ConstructNoOutputStack(arg0),
            DataType::Var(arg0) => Self::ConstructNoOutputVar(arg0),
            DataType::F32(arg0) => Self::ConstructNoOutputF32(arg0),
            DataType::I32(arg0) => Self::ConstructNoOutputI32(arg0),
            DataType::U32(arg0) => Self::ConstructNoOutputU32(arg0),
            DataType::Boolean(arg0) => Self::ConstructNoOutputBool(arg0),
            DataType::Null(arg0) => Self::ConstructNoOutputNull(arg0),
            DataType::Undefined(arg0) => Self::ConstructNoOutputUndefined(arg0),
        }
    }
    #[must_use]
    pub fn push_call(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::PushCallAcc(arg0),
            DataType::Const(arg0) => Self::PushCallConst(arg0),
            DataType::Reg(arg0) => Self::PushCallReg(arg0),
            DataType::Stack(arg0) => Self::PushCallStack(arg0),
            DataType::Var(arg0) => Self::PushCallVar(arg0),
            DataType::F32(arg0) => Self::PushCallF32(arg0),
            DataType::I32(arg0) => Self::PushCallI32(arg0),
            DataType::U32(arg0) => Self::PushCallU32(arg0),
            DataType::Boolean(arg0) => Self::PushCallBool(arg0),
            DataType::Null(arg0) => Self::PushCallNull(arg0),
            DataType::Undefined(arg0) => Self::PushCallUndefined(arg0),
        }
    }
    #[must_use]
    pub fn spread_call(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::SpreadCallAcc(arg0),
            DataType::Const(arg0) => Self::SpreadCallConst(arg0),
            DataType::Reg(arg0) => Self::SpreadCallReg(arg0),
            DataType::Stack(arg0) => Self::SpreadCallStack(arg0),
            DataType::Var(arg0) => Self::SpreadCallVar(arg0),
            DataType::F32(arg0) => Self::SpreadCallF32(arg0),
            DataType::I32(arg0) => Self::SpreadCallI32(arg0),
            DataType::U32(arg0) => Self::SpreadCallU32(arg0),
            DataType::Boolean(arg0) => Self::SpreadCallBool(arg0),
            DataType::Null(arg0) => Self::SpreadCallNull(arg0),
            DataType::Undefined(arg0) => Self::SpreadCallUndefined(arg0),
        }
    }
    #[must_use]
    pub fn jmp(arg0: JmpAddr) -> Self {
        Self::Jmp(arg0)
    }
    #[must_use]
    pub fn jmp_if(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNotF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNotI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNotU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNotBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNotNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNotUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_null(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNullAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNullConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNullReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNullStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNullVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNullF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNullI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNullU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNullBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNullNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNullUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_null(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotNullAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotNullConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotNullReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotNullStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotNullVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNotNullF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNotNullI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNotNullU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNotNullBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNotNullNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNotNullUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_undefined(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfUndefinedAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfUndefinedConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfUndefinedReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfUndefinedStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfUndefinedVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfUndefinedF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfUndefinedI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfUndefinedU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfUndefinedBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfUndefinedNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfUndefinedUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_undefined(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotUndefinedAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotUndefinedConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotUndefinedReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotUndefinedStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotUndefinedVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNotUndefinedF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNotUndefinedI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNotUndefinedU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNotUndefinedBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNotUndefinedNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNotUndefinedUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_nullish(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNullishAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNullishConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNullishReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNullishStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNullishVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNullishF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNullishI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNullishU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNullishBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNullishNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNullishUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_nullish(arg0: impl Data, arg1: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotNullishAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotNullishConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotNullishReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotNullishStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotNullishVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNotNullishF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNotNullishI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNotNullishU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNotNullishBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNotNullishNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNotNullishUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_rel(arg0: JmpOffset) -> Self {
        Self::JmpRel(arg0)
    }
    #[must_use]
    pub fn jmp_if_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfRelVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfRelF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfRelI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfRelU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfRelBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfRelNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfRelUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotRelVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNotRelF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNotRelI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNotRelU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNotRelBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNotRelNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNotRelUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_null_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNullRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNullRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNullRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNullRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNullRelVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNullRelF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNullRelI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNullRelU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNullRelBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNullRelNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNullRelUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_null_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotNullRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotNullRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotNullRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotNullRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotNullRelVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNotNullRelF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNotNullRelI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNotNullRelU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNotNullRelBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNotNullRelNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNotNullRelUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_undefined_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfUndefinedRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfUndefinedRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfUndefinedRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfUndefinedRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfUndefinedRelVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfUndefinedRelF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfUndefinedRelI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfUndefinedRelU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfUndefinedRelBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfUndefinedRelNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfUndefinedRelUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_undefined_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotUndefinedRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotUndefinedRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotUndefinedRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotUndefinedRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotUndefinedRelVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNotUndefinedRelF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNotUndefinedRelI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNotUndefinedRelU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNotUndefinedRelBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNotUndefinedRelNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNotUndefinedRelUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_nullish_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNullishRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNullishRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNullishRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNullishRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNullishRelVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNullishRelF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNullishRelI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNullishRelU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNullishRelBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNullishRelNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNullishRelUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_not_nullish_rel(arg0: impl Data, arg1: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::JmpIfNotNullishRelAcc(arg0, arg1),
            DataType::Const(arg0) => Self::JmpIfNotNullishRelConst(arg0, arg1),
            DataType::Reg(arg0) => Self::JmpIfNotNullishRelReg(arg0, arg1),
            DataType::Stack(arg0) => Self::JmpIfNotNullishRelStack(arg0, arg1),
            DataType::Var(arg0) => Self::JmpIfNotNullishRelVar(arg0, arg1),
            DataType::F32(arg0) => Self::JmpIfNotNullishRelF32(arg0, arg1),
            DataType::I32(arg0) => Self::JmpIfNotNullishRelI32(arg0, arg1),
            DataType::U32(arg0) => Self::JmpIfNotNullishRelU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::JmpIfNotNullishRelBool(arg0, arg1),
            DataType::Null(arg0) => Self::JmpIfNotNullishRelNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::JmpIfNotNullishRelUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn jmp_if_eq(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqAccBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqConstBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqRegBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqStackBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqVarBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqF32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqI32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqU32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqBoolConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqBoolStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqBoolBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqNullConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqNullStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqNullBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqUndefinedAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfEqUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfEqUndefinedReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfEqUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfEqUndefinedVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqUndefinedF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqUndefinedI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqUndefinedU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfEqUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfEqUndefinedNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_ne(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeAccBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeConstBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeRegBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeStackBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeVarBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeF32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeI32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeU32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeBoolConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeBoolStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeBoolBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeNullConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeNullStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeNullBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeUndefinedAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfNeUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfNeUndefinedReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfNeUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfNeUndefinedVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeUndefinedF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeUndefinedI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeUndefinedU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfNeUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfNeUndefinedNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_strict_eq(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqAccConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqAccStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqAccBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictEqAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqConstBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqConstNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRegConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRegStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRegBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictEqRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqStackBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqStackNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqVarConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqVarStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqVarBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictEqVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqF32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqF32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqF32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictEqF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqI32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqI32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqI32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictEqI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqU32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqU32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqU32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictEqU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqBoolConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqBoolStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqBoolBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictEqBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqNullConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqNullStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqNullBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictEqNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictEqUndefinedAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictEqUndefinedReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictEqUndefinedVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictEqUndefinedF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictEqUndefinedI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictEqUndefinedU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_strict_ne(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeAccConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeAccStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeAccBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictNeAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeConstBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeConstNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRegConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRegStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRegBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictNeRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeStackBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeStackNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeVarConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeVarStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeVarBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictNeVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeF32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeF32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeF32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictNeF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeI32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeI32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeI32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictNeI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeU32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeU32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeU32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictNeU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeBoolConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeBoolStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeBoolBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictNeBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeNullConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeNullStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeNullBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfStrictNeNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictNeUndefinedAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictNeUndefinedReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictNeUndefinedVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictNeUndefinedF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictNeUndefinedI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictNeUndefinedU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_lt(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtAccBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtConstBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtRegBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtStackBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtVarBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtF32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtI32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtU32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtBoolConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtBoolStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtBoolBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtNullConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtNullStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtNullBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtUndefinedAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfLtUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfLtUndefinedReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfLtUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfLtUndefinedVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtUndefinedF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtUndefinedI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtUndefinedU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtUndefinedNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_lt_eq(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtEqAccBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtEqAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtEqConstBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtEqConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtEqRegBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtEqRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtEqStackBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtEqStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtEqVarBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtEqVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtEqF32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtEqF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtEqI32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtEqI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtEqU32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtEqU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqBoolConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqBoolStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtEqBoolBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtEqBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqNullConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqNullStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtEqNullBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtEqNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqUndefinedAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfLtEqUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfLtEqUndefinedReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfLtEqUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfLtEqUndefinedVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqUndefinedF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqUndefinedI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqUndefinedU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfLtEqUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_gt(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtAccBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtConstBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtRegBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtStackBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtVarBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtF32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtI32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtU32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtBoolConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtBoolStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtBoolBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtNullConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtNullStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtNullBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtUndefinedAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfGtUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfGtUndefinedReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfGtUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfGtUndefinedVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtUndefinedF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtUndefinedI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtUndefinedU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtUndefinedNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_gt_eq(arg0: impl Data, arg1: impl Data, arg2: JmpAddr) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtEqAccBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtEqAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtEqConstBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtEqConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtEqRegBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtEqRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtEqStackBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtEqStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtEqVarBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtEqVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtEqF32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtEqF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtEqI32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtEqI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtEqU32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtEqU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqBoolConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqBoolStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtEqBoolBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtEqBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqNullConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqNullStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtEqNullBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtEqNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqUndefinedAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfGtEqUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfGtEqUndefinedReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfGtEqUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfGtEqUndefinedVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqUndefinedF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqUndefinedI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqUndefinedU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfGtEqUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_eq_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqRelAccBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqRelAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfEqRelConstBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfEqRelConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqRelRegBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqRelRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfEqRelStackBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfEqRelStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqRelVarBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqRelVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqRelF32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqRelF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqRelI32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqRelI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqRelU32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqRelU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelBoolConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelBoolStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqRelBoolBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqRelBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfEqRelNullConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfEqRelNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfEqRelNullStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfEqRelNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfEqRelNullBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfEqRelNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfEqRelUndefinedAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfEqRelUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfEqRelUndefinedReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfEqRelUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfEqRelUndefinedVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfEqRelUndefinedF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfEqRelUndefinedI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfEqRelUndefinedU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfEqRelUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfEqRelUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfEqRelUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_ne_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeRelAccBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeRelAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfNeRelConstBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfNeRelConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeRelRegBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeRelRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfNeRelStackBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfNeRelStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeRelVarBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeRelVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeRelF32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeRelF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeRelI32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeRelI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeRelU32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeRelU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelBoolConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelBoolStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeRelBoolBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeRelBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfNeRelNullConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfNeRelNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfNeRelNullStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfNeRelNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfNeRelNullBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfNeRelNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfNeRelUndefinedAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfNeRelUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfNeRelUndefinedReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfNeRelUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfNeRelUndefinedVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfNeRelUndefinedF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfNeRelUndefinedI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfNeRelUndefinedU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfNeRelUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfNeRelUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfNeRelUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_strict_eq_rel(
        arg0: impl Data,
        arg1: impl Data,
        arg2: JmpOffset,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelAccConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelAccStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRelAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqRelAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqRelAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqRelAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelAccBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelAccNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictEqRelConstAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictEqRelConstReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictEqRelConstVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictEqRelConstF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictEqRelConstI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictEqRelConstU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelConstBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelConstNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelRegConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelRegStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRelRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqRelRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqRelRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqRelRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelRegBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelRegNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictEqRelStackAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictEqRelStackReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictEqRelStackVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictEqRelStackF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictEqRelStackI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictEqRelStackU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelStackBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelStackNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelVarConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelVarStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRelVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqRelVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqRelVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqRelVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelVarBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelVarNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRelF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelF32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRelF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelF32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRelF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqRelF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqRelF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqRelF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelF32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelF32Null(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRelI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelI32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRelI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelI32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRelI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqRelI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqRelI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqRelI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelI32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelI32Null(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictEqRelU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelU32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictEqRelU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelU32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictEqRelU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictEqRelU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictEqRelU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictEqRelU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelU32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelU32Null(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictEqRelBoolAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelBoolConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictEqRelBoolReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelBoolStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictEqRelBoolVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictEqRelBoolF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictEqRelBoolI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictEqRelBoolU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelBoolBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelBoolNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictEqRelNullAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelNullConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictEqRelNullReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelNullStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictEqRelNullVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictEqRelNullF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictEqRelNullI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictEqRelNullU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelNullBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelNullNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictEqRelUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_strict_ne_rel(
        arg0: impl Data,
        arg1: impl Data,
        arg2: JmpOffset,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelAccConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelAccStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRelAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeRelAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeRelAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeRelAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelAccBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelAccNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictNeRelConstAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictNeRelConstReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictNeRelConstVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictNeRelConstF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictNeRelConstI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictNeRelConstU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelConstBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelConstNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelRegConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelRegStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRelRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeRelRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeRelRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeRelRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelRegBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelRegNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictNeRelStackAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictNeRelStackReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictNeRelStackVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictNeRelStackF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictNeRelStackI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictNeRelStackU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelStackBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelStackNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelVarConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelVarStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRelVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeRelVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeRelVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeRelVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelVarBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelVarNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRelF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelF32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRelF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelF32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRelF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeRelF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeRelF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeRelF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelF32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelF32Null(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRelI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelI32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRelI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelI32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRelI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeRelI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeRelI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeRelI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelI32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelI32Null(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfStrictNeRelU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelU32Const(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfStrictNeRelU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelU32Stack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfStrictNeRelU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfStrictNeRelU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfStrictNeRelU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfStrictNeRelU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelU32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelU32Null(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictNeRelBoolAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelBoolConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictNeRelBoolReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelBoolStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictNeRelBoolVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictNeRelBoolF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictNeRelBoolI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictNeRelBoolU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelBoolBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelBoolNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictNeRelNullAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelNullConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictNeRelNullReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelNullStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictNeRelNullVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictNeRelNullF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictNeRelNullI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictNeRelNullU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelNullBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelNullNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfStrictNeRelUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_lt_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtRelAccBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtRelAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtRelConstBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtRelConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtRelRegBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtRelRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtRelStackBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtRelStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtRelVarBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtRelVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtRelF32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtRelF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtRelI32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtRelI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtRelU32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtRelU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelBoolConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelBoolStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtRelBoolBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtRelBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtRelNullConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtRelNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtRelNullStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtRelNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfLtRelNullBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfLtRelNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtRelUndefinedAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfLtRelUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfLtRelUndefinedReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfLtRelUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfLtRelUndefinedVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtRelUndefinedF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtRelUndefinedI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtRelUndefinedU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtRelUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfLtRelUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtRelUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_lt_eq_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRelAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRelAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRelAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRelAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelAccBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtEqRelAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfLtEqRelConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfLtEqRelConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfLtEqRelConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRelConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRelConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRelConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelConstBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtEqRelConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRelRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRelRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRelRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRelRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelRegBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtEqRelRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfLtEqRelStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfLtEqRelStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfLtEqRelStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRelStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRelStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRelStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelStackBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtEqRelStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRelVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRelVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRelVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRelVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelVarBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtEqRelVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRelF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRelF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRelF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRelF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRelF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRelF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelF32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtEqRelF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRelI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRelI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRelI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRelI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRelI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRelI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelI32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtEqRelI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfLtEqRelU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfLtEqRelU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfLtEqRelU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRelU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRelU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRelU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelU32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtEqRelU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfLtEqRelBoolConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfLtEqRelBoolStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfLtEqRelBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRelBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRelBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRelBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelBoolBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtEqRelBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfLtEqRelNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfLtEqRelNullConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfLtEqRelNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfLtEqRelNullStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfLtEqRelNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfLtEqRelNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfLtEqRelNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfLtEqRelNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelNullBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfLtEqRelNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfLtEqRelUndefinedAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfLtEqRelUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfLtEqRelUndefinedReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfLtEqRelUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfLtEqRelUndefinedVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfLtEqRelUndefinedF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfLtEqRelUndefinedI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfLtEqRelUndefinedU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfLtEqRelUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfLtEqRelUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfLtEqRelUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_gt_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtRelAccBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtRelAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelConstConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelConstStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtRelConstBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtRelConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtRelRegBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtRelRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelStackConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelStackStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtRelStackBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtRelStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtRelVarBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtRelVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtRelF32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtRelF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtRelI32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtRelI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtRelU32Bool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtRelU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelBoolConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelBoolStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtRelBoolBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtRelBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtRelNullConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtRelNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtRelNullStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtRelNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => Self::JmpIfGtRelNullBool(arg0, arg1, arg2),
                    DataType::Null(arg1) => Self::JmpIfGtRelNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtRelUndefinedAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfGtRelUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfGtRelUndefinedReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfGtRelUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfGtRelUndefinedVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtRelUndefinedF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtRelUndefinedI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtRelUndefinedU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtRelUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfGtRelUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtRelUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn jmp_if_gt_eq_rel(arg0: impl Data, arg1: impl Data, arg2: JmpOffset) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelAccAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRelAccConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelAccReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRelAccStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRelAccVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRelAccF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRelAccI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRelAccU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelAccBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtEqRelAccNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelAccUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelConstAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfGtEqRelConstConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelConstReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfGtEqRelConstStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfGtEqRelConstVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRelConstF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRelConstI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRelConstU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelConstBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtEqRelConstNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelConstUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelRegAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRelRegConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelRegReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRelRegStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRelRegVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRelRegF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRelRegI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRelRegU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelRegBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtEqRelRegNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelRegUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelStackAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfGtEqRelStackConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelStackReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfGtEqRelStackStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfGtEqRelStackVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRelStackF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRelStackI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRelStackU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelStackBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtEqRelStackNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelStackUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelVarAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRelVarConst(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelVarReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRelVarStack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRelVarVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRelVarF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRelVarI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRelVarU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelVarBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtEqRelVarNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelVarUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelF32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRelF32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelF32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRelF32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRelF32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRelF32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRelF32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRelF32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelF32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtEqRelF32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelF32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelI32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRelI32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelI32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRelI32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRelI32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRelI32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRelI32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRelI32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelI32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtEqRelI32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelI32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelU32Acc(arg0, arg1, arg2),
                    DataType::Const(arg1) => Self::JmpIfGtEqRelU32Const(arg0, arg1, arg2),
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelU32Reg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => Self::JmpIfGtEqRelU32Stack(arg0, arg1, arg2),
                    DataType::Var(arg1) => Self::JmpIfGtEqRelU32Var(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRelU32F32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRelU32I32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRelU32U32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelU32Bool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtEqRelU32Null(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelU32Undefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelBoolAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfGtEqRelBoolConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelBoolReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfGtEqRelBoolStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfGtEqRelBoolVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRelBoolF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRelBoolI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRelBoolU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelBoolBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtEqRelBoolNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelBoolUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::JmpIfGtEqRelNullAcc(arg0, arg1, arg2),
                    DataType::Const(arg1) => {
                        Self::JmpIfGtEqRelNullConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => Self::JmpIfGtEqRelNullReg(arg0, arg1, arg2),
                    DataType::Stack(arg1) => {
                        Self::JmpIfGtEqRelNullStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => Self::JmpIfGtEqRelNullVar(arg0, arg1, arg2),
                    DataType::F32(arg1) => Self::JmpIfGtEqRelNullF32(arg0, arg1, arg2),
                    DataType::I32(arg1) => Self::JmpIfGtEqRelNullI32(arg0, arg1, arg2),
                    DataType::U32(arg1) => Self::JmpIfGtEqRelNullU32(arg0, arg1, arg2),
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelNullBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => Self::JmpIfGtEqRelNullNull(arg0, arg1, arg2),
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelNullUndefined(arg0, arg1, arg2)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        Self::JmpIfGtEqRelUndefinedAcc(arg0, arg1, arg2)
                    }
                    DataType::Const(arg1) => {
                        Self::JmpIfGtEqRelUndefinedConst(arg0, arg1, arg2)
                    }
                    DataType::Reg(arg1) => {
                        Self::JmpIfGtEqRelUndefinedReg(arg0, arg1, arg2)
                    }
                    DataType::Stack(arg1) => {
                        Self::JmpIfGtEqRelUndefinedStack(arg0, arg1, arg2)
                    }
                    DataType::Var(arg1) => {
                        Self::JmpIfGtEqRelUndefinedVar(arg0, arg1, arg2)
                    }
                    DataType::F32(arg1) => {
                        Self::JmpIfGtEqRelUndefinedF32(arg0, arg1, arg2)
                    }
                    DataType::I32(arg1) => {
                        Self::JmpIfGtEqRelUndefinedI32(arg0, arg1, arg2)
                    }
                    DataType::U32(arg1) => {
                        Self::JmpIfGtEqRelUndefinedU32(arg0, arg1, arg2)
                    }
                    DataType::Boolean(arg1) => {
                        Self::JmpIfGtEqRelUndefinedBool(arg0, arg1, arg2)
                    }
                    DataType::Null(arg1) => {
                        Self::JmpIfGtEqRelUndefinedNull(arg0, arg1, arg2)
                    }
                    DataType::Undefined(arg1) => {
                        Self::JmpIfGtEqRelUndefinedUndefined(arg0, arg1, arg2)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn load_member(
        arg0: impl Data,
        arg1: impl Data,
        output: impl OutputData,
    ) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberAccUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberAccUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberAccUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberAccUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberConstUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberConstUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberConstUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberConstUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberRegUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberRegUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberRegUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberRegUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberStackUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberStackUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberStackUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberStackUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberVarUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberVarUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberVarUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberVarUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberF32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberF32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberF32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberF32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberI32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberI32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberI32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberI32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32AccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32AccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32AccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32AccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32ConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32ConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32ConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32ConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32RegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32RegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32RegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32RegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32StackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32StackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32StackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32StackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32VarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32VarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32VarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32VarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32F32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32F32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32F32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32F32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32I32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32I32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32I32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32I32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32U32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32U32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32U32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32U32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32BoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32BoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32BoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32BoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32NullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32NullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32NullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32NullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberU32UndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberU32UndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberU32UndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberU32UndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberBoolUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberBoolUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberBoolUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberBoolUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberNullUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberNullUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberNullUndefinedToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberNullUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedAccToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedAccToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedAccToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedAccToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Const(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedConstToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedConstToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedConstToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedConstToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Reg(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedRegToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedRegToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedRegToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedRegToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Stack(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedStackToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedStackToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedStackToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedStackToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Var(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedVarToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedVarToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedVarToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedVarToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::F32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedF32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedF32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedF32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedF32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::I32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedI32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedI32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedI32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedI32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::U32(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedU32ToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedU32ToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedU32ToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedU32ToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Boolean(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedBoolToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedBoolToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedBoolToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedBoolToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Null(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedNullToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedNullToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedNullToStack(arg0, arg1, output)
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedNullToVar(arg0, arg1, output)
                            }
                        }
                    }
                    DataType::Undefined(arg1) => {
                        match output.data_type() {
                            OutputDataType::Acc(output) => {
                                Self::LoadMemberUndefinedUndefinedToAcc(arg0, arg1, output)
                            }
                            OutputDataType::Reg(output) => {
                                Self::LoadMemberUndefinedUndefinedToReg(arg0, arg1, output)
                            }
                            OutputDataType::Stack(output) => {
                                Self::LoadMemberUndefinedUndefinedToStack(
                                    arg0,
                                    arg1,
                                    output,
                                )
                            }
                            OutputDataType::Var(output) => {
                                Self::LoadMemberUndefinedUndefinedToVar(arg0, arg1, output)
                            }
                        }
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn load_var(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarConstToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarStackToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::LoadVarNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::LoadVarNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::LoadVarNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::LoadVarNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LoadVarUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LoadVarUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LoadVarUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LoadVarUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn type_of(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::TypeOfAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::TypeOfAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfConstToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::TypeOfConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::TypeOfConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::TypeOfRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::TypeOfRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfStackToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::TypeOfStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::TypeOfStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::TypeOfVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::TypeOfVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::TypeOfF32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::TypeOfF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::TypeOfI32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::TypeOfI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::TypeOfU32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::TypeOfU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::TypeOfBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::TypeOfBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::TypeOfNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::TypeOfNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::TypeOfNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::TypeOfNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::TypeOfUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::TypeOfUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::TypeOfUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::TypeOfUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn push(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::PushAcc(arg0),
            DataType::Const(arg0) => Self::PushConst(arg0),
            DataType::Reg(arg0) => Self::PushReg(arg0),
            DataType::Stack(arg0) => Self::PushStack(arg0),
            DataType::Var(arg0) => Self::PushVar(arg0),
            DataType::F32(arg0) => Self::PushF32(arg0),
            DataType::I32(arg0) => Self::PushI32(arg0),
            DataType::U32(arg0) => Self::PushU32(arg0),
            DataType::Boolean(arg0) => Self::PushBool(arg0),
            DataType::Null(arg0) => Self::PushNull(arg0),
            DataType::Undefined(arg0) => Self::PushUndefined(arg0),
        }
    }
    #[must_use]
    pub fn pop() -> Self {
        Self::Pop
    }
    #[must_use]
    pub fn pop_n(arg0: u32) -> Self {
        Self::PopN(arg0)
    }
    #[must_use]
    pub fn pop_to(output: impl OutputData) -> Self {
        match output.data_type() {
            OutputDataType::Acc(output) => Self::PopToToAcc(output),
            OutputDataType::Reg(output) => Self::PopToToReg(output),
            OutputDataType::Stack(output) => Self::PopToToStack(output),
            OutputDataType::Var(output) => Self::PopToToVar(output),
        }
    }
    #[must_use]
    pub fn move_(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveConstToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveConstToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveStackToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveStackToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveF32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveI32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveU32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveBoolToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveNullToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::MoveNullToStack(arg0, output),
                    OutputDataType::Var(output) => Self::MoveNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MoveUndefinedToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MoveUndefinedToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::MoveUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::MoveUndefinedToVar(arg0, output),
                }
            }
        }
    }
    #[must_use]
    pub fn return_() -> Self {
        Self::Return
    }
    #[must_use]
    pub fn return_value(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::ReturnValueAcc(arg0),
            DataType::Const(arg0) => Self::ReturnValueConst(arg0),
            DataType::Reg(arg0) => Self::ReturnValueReg(arg0),
            DataType::Stack(arg0) => Self::ReturnValueStack(arg0),
            DataType::Var(arg0) => Self::ReturnValueVar(arg0),
            DataType::F32(arg0) => Self::ReturnValueF32(arg0),
            DataType::I32(arg0) => Self::ReturnValueI32(arg0),
            DataType::U32(arg0) => Self::ReturnValueU32(arg0),
            DataType::Boolean(arg0) => Self::ReturnValueBool(arg0),
            DataType::Null(arg0) => Self::ReturnValueNull(arg0),
            DataType::Undefined(arg0) => Self::ReturnValueUndefined(arg0),
        }
    }
    #[must_use]
    pub fn break_() -> Self {
        Self::Break
    }
    #[must_use]
    pub fn break_label(arg0: Label) -> Self {
        Self::BreakLabel(arg0)
    }
    #[must_use]
    pub fn continue_() -> Self {
        Self::Continue
    }
    #[must_use]
    pub fn continue_label(arg0: Label) -> Self {
        Self::ContinueLabel(arg0)
    }
    #[must_use]
    pub fn throw(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::ThrowAcc(arg0),
            DataType::Const(arg0) => Self::ThrowConst(arg0),
            DataType::Reg(arg0) => Self::ThrowReg(arg0),
            DataType::Stack(arg0) => Self::ThrowStack(arg0),
            DataType::Var(arg0) => Self::ThrowVar(arg0),
            DataType::F32(arg0) => Self::ThrowF32(arg0),
            DataType::I32(arg0) => Self::ThrowI32(arg0),
            DataType::U32(arg0) => Self::ThrowU32(arg0),
            DataType::Boolean(arg0) => Self::ThrowBool(arg0),
            DataType::Null(arg0) => Self::ThrowNull(arg0),
            DataType::Undefined(arg0) => Self::ThrowUndefined(arg0),
        }
    }
    #[must_use]
    pub fn this(output: impl OutputData) -> Self {
        match output.data_type() {
            OutputDataType::Acc(output) => Self::ThisToAcc(output),
            OutputDataType::Reg(output) => Self::ThisToReg(output),
            OutputDataType::Stack(output) => Self::ThisToStack(output),
            OutputDataType::Var(output) => Self::ThisToVar(output),
        }
    }
    #[must_use]
    pub fn load_super(output: impl OutputData) -> Self {
        match output.data_type() {
            OutputDataType::Acc(output) => Self::LoadSuperToAcc(output),
            OutputDataType::Reg(output) => Self::LoadSuperToReg(output),
            OutputDataType::Stack(output) => Self::LoadSuperToStack(output),
            OutputDataType::Var(output) => Self::LoadSuperToVar(output),
        }
    }
    #[must_use]
    pub fn load_super_constructor(output: impl OutputData) -> Self {
        match output.data_type() {
            OutputDataType::Acc(output) => Self::LoadSuperConstructorToAcc(output),
            OutputDataType::Reg(output) => Self::LoadSuperConstructorToReg(output),
            OutputDataType::Stack(output) => Self::LoadSuperConstructorToStack(output),
            OutputDataType::Var(output) => Self::LoadSuperConstructorToVar(output),
        }
    }
    #[must_use]
    pub fn yield_(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::YieldAcc(arg0),
            DataType::Const(arg0) => Self::YieldConst(arg0),
            DataType::Reg(arg0) => Self::YieldReg(arg0),
            DataType::Stack(arg0) => Self::YieldStack(arg0),
            DataType::Var(arg0) => Self::YieldVar(arg0),
            DataType::F32(arg0) => Self::YieldF32(arg0),
            DataType::I32(arg0) => Self::YieldI32(arg0),
            DataType::U32(arg0) => Self::YieldU32(arg0),
            DataType::Boolean(arg0) => Self::YieldBool(arg0),
            DataType::Null(arg0) => Self::YieldNull(arg0),
            DataType::Undefined(arg0) => Self::YieldUndefined(arg0),
        }
    }
    #[must_use]
    pub fn await_(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AwaitAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AwaitAccToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::AwaitAccToStack(arg0, output),
                    OutputDataType::Var(output) => Self::AwaitAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AwaitConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AwaitConstToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AwaitConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AwaitConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AwaitRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AwaitRegToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::AwaitRegToStack(arg0, output),
                    OutputDataType::Var(output) => Self::AwaitRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AwaitStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AwaitStackToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AwaitStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AwaitStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AwaitVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AwaitVarToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::AwaitVarToStack(arg0, output),
                    OutputDataType::Var(output) => Self::AwaitVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AwaitF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AwaitF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::AwaitF32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::AwaitF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AwaitI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AwaitI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::AwaitI32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::AwaitI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AwaitU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AwaitU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::AwaitU32ToStack(arg0, output),
                    OutputDataType::Var(output) => Self::AwaitU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AwaitBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AwaitBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::AwaitBoolToStack(arg0, output),
                    OutputDataType::Var(output) => Self::AwaitBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AwaitNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AwaitNullToReg(arg0, output),
                    OutputDataType::Stack(output) => Self::AwaitNullToStack(arg0, output),
                    OutputDataType::Var(output) => Self::AwaitNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::AwaitUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::AwaitUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::AwaitUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::AwaitUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn await_no_output(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::AwaitNoOutputAcc(arg0),
            DataType::Const(arg0) => Self::AwaitNoOutputConst(arg0),
            DataType::Reg(arg0) => Self::AwaitNoOutputReg(arg0),
            DataType::Stack(arg0) => Self::AwaitNoOutputStack(arg0),
            DataType::Var(arg0) => Self::AwaitNoOutputVar(arg0),
            DataType::F32(arg0) => Self::AwaitNoOutputF32(arg0),
            DataType::I32(arg0) => Self::AwaitNoOutputI32(arg0),
            DataType::U32(arg0) => Self::AwaitNoOutputU32(arg0),
            DataType::Boolean(arg0) => Self::AwaitNoOutputBool(arg0),
            DataType::Null(arg0) => Self::AwaitNoOutputNull(arg0),
            DataType::Undefined(arg0) => Self::AwaitNoOutputUndefined(arg0),
        }
    }
    #[must_use]
    pub fn debugger() -> Self {
        Self::Debugger
    }
    #[must_use]
    pub fn with(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::WithAcc(arg0),
            DataType::Const(arg0) => Self::WithConst(arg0),
            DataType::Reg(arg0) => Self::WithReg(arg0),
            DataType::Stack(arg0) => Self::WithStack(arg0),
            DataType::Var(arg0) => Self::WithVar(arg0),
            DataType::F32(arg0) => Self::WithF32(arg0),
            DataType::I32(arg0) => Self::WithI32(arg0),
            DataType::U32(arg0) => Self::WithU32(arg0),
            DataType::Boolean(arg0) => Self::WithBool(arg0),
            DataType::Null(arg0) => Self::WithNull(arg0),
            DataType::Undefined(arg0) => Self::WithUndefined(arg0),
        }
    }
    #[must_use]
    pub fn enter_try(arg0: ControlIdx) -> Self {
        Self::EnterTry(arg0)
    }
    #[must_use]
    pub fn leave_try() -> Self {
        Self::LeaveTry
    }
    #[must_use]
    pub fn add_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AddAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AddAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AddAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AddAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::AddAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::AddAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::AddAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::AddAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AddAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AddAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AddAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AddAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::AddAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::AddAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::AddAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::AddAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AddAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AddAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AddAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AddAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AddAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AddAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AddAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AddAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AddAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AddAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AddAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AddAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AddAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AddAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AddAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AddAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AddAssignBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AddAssignBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AddAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AddAssignBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AddAssignNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AddAssignNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AddAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AddAssignNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::AddAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::AddAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::AddAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::AddAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn sub_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::SubAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::SubAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::SubAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::SubAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::SubAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::SubAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::SubAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::SubAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::SubAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::SubAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::SubAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::SubAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::SubAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::SubAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::SubAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::SubAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::SubAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::SubAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::SubAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::SubAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::SubAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::SubAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::SubAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::SubAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::SubAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::SubAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::SubAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::SubAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::SubAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::SubAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::SubAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::SubAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::SubAssignBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::SubAssignBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::SubAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::SubAssignBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::SubAssignNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::SubAssignNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::SubAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::SubAssignNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::SubAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::SubAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::SubAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::SubAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn mul_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MulAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MulAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::MulAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::MulAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::MulAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::MulAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::MulAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::MulAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MulAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MulAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::MulAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::MulAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::MulAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::MulAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::MulAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::MulAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MulAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MulAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::MulAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::MulAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MulAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MulAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::MulAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::MulAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MulAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MulAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::MulAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::MulAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MulAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MulAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::MulAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::MulAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MulAssignBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MulAssignBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::MulAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::MulAssignBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::MulAssignNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::MulAssignNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::MulAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::MulAssignNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::MulAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::MulAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::MulAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::MulAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn div_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DivAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DivAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::DivAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::DivAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::DivAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::DivAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::DivAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::DivAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DivAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DivAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::DivAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::DivAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::DivAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::DivAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::DivAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::DivAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DivAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DivAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::DivAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::DivAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DivAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DivAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::DivAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::DivAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DivAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DivAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::DivAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::DivAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DivAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DivAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::DivAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::DivAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DivAssignBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DivAssignBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::DivAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::DivAssignBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::DivAssignNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::DivAssignNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::DivAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::DivAssignNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::DivAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::DivAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::DivAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::DivAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn rem_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::RemAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::RemAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::RemAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::RemAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RemAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RemAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RemAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RemAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::RemAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::RemAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::RemAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::RemAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RemAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RemAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RemAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RemAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::RemAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::RemAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::RemAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::RemAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::RemAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::RemAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::RemAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::RemAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::RemAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::RemAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::RemAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::RemAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::RemAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::RemAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::RemAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::RemAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::RemAssignBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::RemAssignBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::RemAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::RemAssignBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::RemAssignNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::RemAssignNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::RemAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::RemAssignNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RemAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RemAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RemAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RemAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn l_shift_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignAccToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignAccToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignAccToVar(arg0, output)
                    }
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignRegToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignRegToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignRegToVar(arg0, output)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignVarToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignVarToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignVarToVar(arg0, output)
                    }
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignF32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignF32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignF32ToVar(arg0, output)
                    }
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignI32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignI32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignI32ToVar(arg0, output)
                    }
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignU32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignU32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignU32ToVar(arg0, output)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignBoolToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignBoolToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignBoolToVar(arg0, output)
                    }
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignNullToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignNullToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignNullToVar(arg0, output)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::LShiftAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::LShiftAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::LShiftAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::LShiftAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn r_shift_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignAccToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignAccToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignAccToVar(arg0, output)
                    }
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignRegToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignRegToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignRegToVar(arg0, output)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignVarToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignVarToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignVarToVar(arg0, output)
                    }
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignF32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignF32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignF32ToVar(arg0, output)
                    }
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignI32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignI32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignI32ToVar(arg0, output)
                    }
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignU32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignU32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignU32ToVar(arg0, output)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignBoolToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignBoolToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignBoolToVar(arg0, output)
                    }
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignNullToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignNullToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignNullToVar(arg0, output)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::RShiftAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::RShiftAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::RShiftAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::RShiftAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn zero_fill_r_shift_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignAccToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignAccToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignAccToVar(arg0, output)
                    }
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignRegToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignRegToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignRegToVar(arg0, output)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignVarToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignVarToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignVarToVar(arg0, output)
                    }
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignF32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignF32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignF32ToVar(arg0, output)
                    }
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignI32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignI32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignI32ToVar(arg0, output)
                    }
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignU32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignU32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignU32ToVar(arg0, output)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignBoolToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignBoolToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignBoolToVar(arg0, output)
                    }
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignNullToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignNullToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignNullToVar(arg0, output)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ZeroFillRShiftAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ZeroFillRShiftAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ZeroFillRShiftAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ZeroFillRShiftAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn b_and_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BAndAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BAndAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BAndAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BAndAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BAndAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BAndAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BAndAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BAndAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BAndAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BAndAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BAndAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BAndAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BAndAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BAndAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BAndAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BAndAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BAndAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BAndAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BAndAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BAndAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BAndAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BAndAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BAndAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BAndAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BAndAssignBoolToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BAndAssignBoolToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BAndAssignBoolToVar(arg0, output)
                    }
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BAndAssignNullToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BAndAssignNullToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BAndAssignNullToVar(arg0, output)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BAndAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BAndAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BAndAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BAndAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn b_or_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BOrAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BOrAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BOrAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BOrAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BOrAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BOrAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BOrAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BOrAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BOrAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BOrAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BOrAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BOrAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BOrAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BOrAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BOrAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BOrAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BOrAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BOrAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BOrAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BOrAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BOrAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BOrAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BOrAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BOrAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BOrAssignBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BOrAssignBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BOrAssignBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BOrAssignNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BOrAssignNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BOrAssignNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BOrAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BOrAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BOrAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BOrAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn b_xor_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BXorAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BXorAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BXorAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BXorAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BXorAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BXorAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BXorAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BXorAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BXorAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BXorAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BXorAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BXorAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BXorAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BXorAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BXorAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BXorAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BXorAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BXorAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BXorAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BXorAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BXorAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::BXorAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::BXorAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::BXorAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BXorAssignBoolToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BXorAssignBoolToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BXorAssignBoolToVar(arg0, output)
                    }
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BXorAssignNullToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BXorAssignNullToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BXorAssignNullToVar(arg0, output)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::BXorAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::BXorAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::BXorAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::BXorAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn exp_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ExpAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ExpAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ExpAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ExpAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ExpAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ExpAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ExpAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ExpAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ExpAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ExpAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ExpAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ExpAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ExpAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ExpAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ExpAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ExpAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ExpAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ExpAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ExpAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ExpAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ExpAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ExpAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ExpAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ExpAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ExpAssignBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ExpAssignBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ExpAssignBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::ExpAssignNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::ExpAssignNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::ExpAssignNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::ExpAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::ExpAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::ExpAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::ExpAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn and_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AndAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AndAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AndAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AndAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::AndAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::AndAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::AndAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::AndAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AndAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AndAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AndAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AndAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::AndAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::AndAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::AndAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::AndAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AndAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AndAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AndAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AndAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AndAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AndAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AndAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AndAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AndAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AndAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AndAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AndAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AndAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AndAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AndAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AndAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AndAssignBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AndAssignBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AndAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AndAssignBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::AndAssignNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::AndAssignNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::AndAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::AndAssignNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::AndAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::AndAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::AndAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::AndAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn or_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::OrAssignAccToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::OrAssignAccToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::OrAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::OrAssignAccToVar(arg0, output),
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::OrAssignConstToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::OrAssignConstToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::OrAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::OrAssignConstToVar(arg0, output),
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::OrAssignRegToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::OrAssignRegToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::OrAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::OrAssignRegToVar(arg0, output),
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::OrAssignStackToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::OrAssignStackToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::OrAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::OrAssignStackToVar(arg0, output),
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::OrAssignVarToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::OrAssignVarToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::OrAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::OrAssignVarToVar(arg0, output),
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::OrAssignF32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::OrAssignF32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::OrAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::OrAssignF32ToVar(arg0, output),
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::OrAssignI32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::OrAssignI32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::OrAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::OrAssignI32ToVar(arg0, output),
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::OrAssignU32ToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::OrAssignU32ToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::OrAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::OrAssignU32ToVar(arg0, output),
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::OrAssignBoolToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::OrAssignBoolToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::OrAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::OrAssignBoolToVar(arg0, output),
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => Self::OrAssignNullToAcc(arg0, output),
                    OutputDataType::Reg(output) => Self::OrAssignNullToReg(arg0, output),
                    OutputDataType::Stack(output) => {
                        Self::OrAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => Self::OrAssignNullToVar(arg0, output),
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::OrAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::OrAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::OrAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::OrAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn nullish_assign(arg0: impl Data, output: impl OutputData) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignAccToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignAccToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignAccToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignAccToVar(arg0, output)
                    }
                }
            }
            DataType::Const(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignConstToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignConstToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignConstToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignConstToVar(arg0, output)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignRegToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignRegToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignRegToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignRegToVar(arg0, output)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignStackToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignStackToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignStackToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignStackToVar(arg0, output)
                    }
                }
            }
            DataType::Var(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignVarToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignVarToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignVarToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignVarToVar(arg0, output)
                    }
                }
            }
            DataType::F32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignF32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignF32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignF32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignF32ToVar(arg0, output)
                    }
                }
            }
            DataType::I32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignI32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignI32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignI32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignI32ToVar(arg0, output)
                    }
                }
            }
            DataType::U32(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignU32ToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignU32ToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignU32ToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignU32ToVar(arg0, output)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignBoolToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignBoolToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignBoolToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignBoolToVar(arg0, output)
                    }
                }
            }
            DataType::Null(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignNullToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignNullToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignNullToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignNullToVar(arg0, output)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match output.data_type() {
                    OutputDataType::Acc(output) => {
                        Self::NullishAssignUndefinedToAcc(arg0, output)
                    }
                    OutputDataType::Reg(output) => {
                        Self::NullishAssignUndefinedToReg(arg0, output)
                    }
                    OutputDataType::Stack(output) => {
                        Self::NullishAssignUndefinedToStack(arg0, output)
                    }
                    OutputDataType::Var(output) => {
                        Self::NullishAssignUndefinedToVar(arg0, output)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn decl_const(arg0: impl Data, arg1: VarName) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::DeclConstAcc(arg0, arg1),
            DataType::Const(arg0) => Self::DeclConstConst(arg0, arg1),
            DataType::Reg(arg0) => Self::DeclConstReg(arg0, arg1),
            DataType::Stack(arg0) => Self::DeclConstStack(arg0, arg1),
            DataType::Var(arg0) => Self::DeclConstVar(arg0, arg1),
            DataType::F32(arg0) => Self::DeclConstF32(arg0, arg1),
            DataType::I32(arg0) => Self::DeclConstI32(arg0, arg1),
            DataType::U32(arg0) => Self::DeclConstU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::DeclConstBool(arg0, arg1),
            DataType::Null(arg0) => Self::DeclConstNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::DeclConstUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn decl_var(arg0: impl Data, arg1: VarName) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::DeclVarAcc(arg0, arg1),
            DataType::Const(arg0) => Self::DeclVarConst(arg0, arg1),
            DataType::Reg(arg0) => Self::DeclVarReg(arg0, arg1),
            DataType::Stack(arg0) => Self::DeclVarStack(arg0, arg1),
            DataType::Var(arg0) => Self::DeclVarVar(arg0, arg1),
            DataType::F32(arg0) => Self::DeclVarF32(arg0, arg1),
            DataType::I32(arg0) => Self::DeclVarI32(arg0, arg1),
            DataType::U32(arg0) => Self::DeclVarU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::DeclVarBool(arg0, arg1),
            DataType::Null(arg0) => Self::DeclVarNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::DeclVarUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn decl_empty_var(arg0: VarName) -> Self {
        Self::DeclEmptyVar(arg0)
    }
    #[must_use]
    pub fn decl_let(arg0: impl Data, arg1: VarName) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::DeclLetAcc(arg0, arg1),
            DataType::Const(arg0) => Self::DeclLetConst(arg0, arg1),
            DataType::Reg(arg0) => Self::DeclLetReg(arg0, arg1),
            DataType::Stack(arg0) => Self::DeclLetStack(arg0, arg1),
            DataType::Var(arg0) => Self::DeclLetVar(arg0, arg1),
            DataType::F32(arg0) => Self::DeclLetF32(arg0, arg1),
            DataType::I32(arg0) => Self::DeclLetI32(arg0, arg1),
            DataType::U32(arg0) => Self::DeclLetU32(arg0, arg1),
            DataType::Boolean(arg0) => Self::DeclLetBool(arg0, arg1),
            DataType::Null(arg0) => Self::DeclLetNull(arg0, arg1),
            DataType::Undefined(arg0) => Self::DeclLetUndefined(arg0, arg1),
        }
    }
    #[must_use]
    pub fn decl_empty_let(arg0: VarName) -> Self {
        Self::DeclEmptyLet(arg0)
    }
    #[must_use]
    pub fn pat_begin_rest(arg0: usize) -> Self {
        Self::PatBeginRest(arg0)
    }
    #[must_use]
    pub fn pat_void_next() -> Self {
        Self::PatVoidNext
    }
    #[must_use]
    pub fn pat_move_let(arg0: impl Data, arg1: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetAccAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetAccConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetAccReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetAccStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetAccVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetAccF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetAccI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetAccU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetAccBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetAccNull(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveLetAccUndefined(arg0, arg1),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetConstAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetConstConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetConstReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetConstStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetConstVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetConstF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetConstI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetConstU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetConstBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetConstNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveLetConstUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetRegAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetRegConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetRegReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetRegStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetRegVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetRegF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetRegI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetRegU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetRegBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetRegNull(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveLetRegUndefined(arg0, arg1),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetStackAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetStackConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetStackReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetStackStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetStackVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetStackF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetStackI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetStackU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetStackBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetStackNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveLetStackUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetVarAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetVarConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetVarReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetVarStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetVarVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetVarF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetVarI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetVarU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetVarBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetVarNull(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveLetVarUndefined(arg0, arg1),
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetF32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetF32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetF32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetF32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetF32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetF32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetF32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetF32U32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetF32Bool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetF32Null(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveLetF32Undefined(arg0, arg1),
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetI32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetI32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetI32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetI32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetI32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetI32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetI32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetI32U32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetI32Bool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetI32Null(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveLetI32Undefined(arg0, arg1),
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetU32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetU32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetU32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetU32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetU32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetU32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetU32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetU32U32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetU32Bool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetU32Null(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveLetU32Undefined(arg0, arg1),
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetBoolAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetBoolConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetBoolReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetBoolStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetBoolVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetBoolF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetBoolI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetBoolU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetBoolBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetBoolNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveLetBoolUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetNullAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetNullConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetNullReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetNullStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetNullVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetNullF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetNullI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetNullU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetNullBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetNullNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveLetNullUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveLetUndefinedAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveLetUndefinedConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveLetUndefinedReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveLetUndefinedStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveLetUndefinedVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveLetUndefinedF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveLetUndefinedI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveLetUndefinedU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveLetUndefinedBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveLetUndefinedNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveLetUndefinedUndefined(arg0, arg1)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn pat_move_const(arg0: impl Data, arg1: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstAccAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstAccConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstAccReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstAccStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstAccVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstAccF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstAccI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstAccU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveConstAccBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveConstAccNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstAccUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstConstAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstConstConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstConstReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstConstStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstConstVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstConstF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstConstI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstConstU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveConstConstBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveConstConstNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstConstUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstRegAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstRegConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstRegReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstRegStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstRegVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstRegF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstRegI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstRegU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveConstRegBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveConstRegNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstRegUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstStackAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstStackConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstStackReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstStackStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstStackVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstStackF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstStackI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstStackU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveConstStackBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveConstStackNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstStackUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstVarAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstVarConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstVarReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstVarStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstVarVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstVarF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstVarI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstVarU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveConstVarBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveConstVarNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstVarUndefined(arg0, arg1)
                    }
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstF32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstF32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstF32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstF32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstF32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstF32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstF32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstF32U32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveConstF32Bool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveConstF32Null(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstF32Undefined(arg0, arg1)
                    }
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstI32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstI32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstI32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstI32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstI32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstI32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstI32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstI32U32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveConstI32Bool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveConstI32Null(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstI32Undefined(arg0, arg1)
                    }
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstU32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstU32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstU32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstU32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstU32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstU32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstU32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstU32U32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveConstU32Bool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveConstU32Null(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstU32Undefined(arg0, arg1)
                    }
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstBoolAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstBoolConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstBoolReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstBoolStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstBoolVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstBoolF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstBoolI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstBoolU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveConstBoolBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveConstBoolNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstBoolUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstNullAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstNullConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstNullReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstNullStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstNullVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstNullF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstNullI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstNullU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveConstNullBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveConstNullNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstNullUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveConstUndefinedAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveConstUndefinedConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveConstUndefinedReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveConstUndefinedStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveConstUndefinedVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveConstUndefinedF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveConstUndefinedI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveConstUndefinedU32(arg0, arg1),
                    DataType::Boolean(arg1) => {
                        Self::PatMoveConstUndefinedBool(arg0, arg1)
                    }
                    DataType::Null(arg1) => Self::PatMoveConstUndefinedNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveConstUndefinedUndefined(arg0, arg1)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn pat_move_var(arg0: impl Data, arg1: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarAccAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarAccConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarAccReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarAccStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarAccVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarAccF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarAccI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarAccU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarAccBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarAccNull(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveVarAccUndefined(arg0, arg1),
                }
            }
            DataType::Const(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarConstAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarConstConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarConstReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarConstStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarConstVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarConstF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarConstI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarConstU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarConstBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarConstNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveVarConstUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Reg(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarRegAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarRegConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarRegReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarRegStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarRegVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarRegF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarRegI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarRegU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarRegBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarRegNull(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveVarRegUndefined(arg0, arg1),
                }
            }
            DataType::Stack(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarStackAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarStackConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarStackReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarStackStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarStackVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarStackF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarStackI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarStackU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarStackBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarStackNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveVarStackUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Var(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarVarAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarVarConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarVarReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarVarStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarVarVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarVarF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarVarI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarVarU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarVarBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarVarNull(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveVarVarUndefined(arg0, arg1),
                }
            }
            DataType::F32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarF32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarF32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarF32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarF32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarF32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarF32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarF32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarF32U32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarF32Bool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarF32Null(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveVarF32Undefined(arg0, arg1),
                }
            }
            DataType::I32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarI32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarI32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarI32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarI32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarI32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarI32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarI32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarI32U32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarI32Bool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarI32Null(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveVarI32Undefined(arg0, arg1),
                }
            }
            DataType::U32(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarU32Acc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarU32Const(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarU32Reg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarU32Stack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarU32Var(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarU32F32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarU32I32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarU32U32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarU32Bool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarU32Null(arg0, arg1),
                    DataType::Undefined(arg1) => Self::PatMoveVarU32Undefined(arg0, arg1),
                }
            }
            DataType::Boolean(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarBoolAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarBoolConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarBoolReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarBoolStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarBoolVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarBoolF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarBoolI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarBoolU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarBoolBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarBoolNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveVarBoolUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Null(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarNullAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarNullConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarNullReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarNullStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarNullVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarNullF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarNullI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarNullU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarNullBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarNullNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveVarNullUndefined(arg0, arg1)
                    }
                }
            }
            DataType::Undefined(arg0) => {
                match arg1.data_type() {
                    DataType::Acc(arg1) => Self::PatMoveVarUndefinedAcc(arg0, arg1),
                    DataType::Const(arg1) => Self::PatMoveVarUndefinedConst(arg0, arg1),
                    DataType::Reg(arg1) => Self::PatMoveVarUndefinedReg(arg0, arg1),
                    DataType::Stack(arg1) => Self::PatMoveVarUndefinedStack(arg0, arg1),
                    DataType::Var(arg1) => Self::PatMoveVarUndefinedVar(arg0, arg1),
                    DataType::F32(arg1) => Self::PatMoveVarUndefinedF32(arg0, arg1),
                    DataType::I32(arg1) => Self::PatMoveVarUndefinedI32(arg0, arg1),
                    DataType::U32(arg1) => Self::PatMoveVarUndefinedU32(arg0, arg1),
                    DataType::Boolean(arg1) => Self::PatMoveVarUndefinedBool(arg0, arg1),
                    DataType::Null(arg1) => Self::PatMoveVarUndefinedNull(arg0, arg1),
                    DataType::Undefined(arg1) => {
                        Self::PatMoveVarUndefinedUndefined(arg0, arg1)
                    }
                }
            }
        }
    }
    #[must_use]
    pub fn pat_rest_let(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::PatRestLetAcc(arg0),
            DataType::Const(arg0) => Self::PatRestLetConst(arg0),
            DataType::Reg(arg0) => Self::PatRestLetReg(arg0),
            DataType::Stack(arg0) => Self::PatRestLetStack(arg0),
            DataType::Var(arg0) => Self::PatRestLetVar(arg0),
            DataType::F32(arg0) => Self::PatRestLetF32(arg0),
            DataType::I32(arg0) => Self::PatRestLetI32(arg0),
            DataType::U32(arg0) => Self::PatRestLetU32(arg0),
            DataType::Boolean(arg0) => Self::PatRestLetBool(arg0),
            DataType::Null(arg0) => Self::PatRestLetNull(arg0),
            DataType::Undefined(arg0) => Self::PatRestLetUndefined(arg0),
        }
    }
    #[must_use]
    pub fn pat_rest_const(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::PatRestConstAcc(arg0),
            DataType::Const(arg0) => Self::PatRestConstConst(arg0),
            DataType::Reg(arg0) => Self::PatRestConstReg(arg0),
            DataType::Stack(arg0) => Self::PatRestConstStack(arg0),
            DataType::Var(arg0) => Self::PatRestConstVar(arg0),
            DataType::F32(arg0) => Self::PatRestConstF32(arg0),
            DataType::I32(arg0) => Self::PatRestConstI32(arg0),
            DataType::U32(arg0) => Self::PatRestConstU32(arg0),
            DataType::Boolean(arg0) => Self::PatRestConstBool(arg0),
            DataType::Null(arg0) => Self::PatRestConstNull(arg0),
            DataType::Undefined(arg0) => Self::PatRestConstUndefined(arg0),
        }
    }
    #[must_use]
    pub fn pat_rest_var(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::PatRestVarAcc(arg0),
            DataType::Const(arg0) => Self::PatRestVarConst(arg0),
            DataType::Reg(arg0) => Self::PatRestVarReg(arg0),
            DataType::Stack(arg0) => Self::PatRestVarStack(arg0),
            DataType::Var(arg0) => Self::PatRestVarVar(arg0),
            DataType::F32(arg0) => Self::PatRestVarF32(arg0),
            DataType::I32(arg0) => Self::PatRestVarI32(arg0),
            DataType::U32(arg0) => Self::PatRestVarU32(arg0),
            DataType::Boolean(arg0) => Self::PatRestVarBool(arg0),
            DataType::Null(arg0) => Self::PatRestVarNull(arg0),
            DataType::Undefined(arg0) => Self::PatRestVarUndefined(arg0),
        }
    }
    #[must_use]
    pub fn pat_array_move_let(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::PatArrayMoveLetAcc(arg0),
            DataType::Const(arg0) => Self::PatArrayMoveLetConst(arg0),
            DataType::Reg(arg0) => Self::PatArrayMoveLetReg(arg0),
            DataType::Stack(arg0) => Self::PatArrayMoveLetStack(arg0),
            DataType::Var(arg0) => Self::PatArrayMoveLetVar(arg0),
            DataType::F32(arg0) => Self::PatArrayMoveLetF32(arg0),
            DataType::I32(arg0) => Self::PatArrayMoveLetI32(arg0),
            DataType::U32(arg0) => Self::PatArrayMoveLetU32(arg0),
            DataType::Boolean(arg0) => Self::PatArrayMoveLetBool(arg0),
            DataType::Null(arg0) => Self::PatArrayMoveLetNull(arg0),
            DataType::Undefined(arg0) => Self::PatArrayMoveLetUndefined(arg0),
        }
    }
    #[must_use]
    pub fn pat_array_move_const(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::PatArrayMoveConstAcc(arg0),
            DataType::Const(arg0) => Self::PatArrayMoveConstConst(arg0),
            DataType::Reg(arg0) => Self::PatArrayMoveConstReg(arg0),
            DataType::Stack(arg0) => Self::PatArrayMoveConstStack(arg0),
            DataType::Var(arg0) => Self::PatArrayMoveConstVar(arg0),
            DataType::F32(arg0) => Self::PatArrayMoveConstF32(arg0),
            DataType::I32(arg0) => Self::PatArrayMoveConstI32(arg0),
            DataType::U32(arg0) => Self::PatArrayMoveConstU32(arg0),
            DataType::Boolean(arg0) => Self::PatArrayMoveConstBool(arg0),
            DataType::Null(arg0) => Self::PatArrayMoveConstNull(arg0),
            DataType::Undefined(arg0) => Self::PatArrayMoveConstUndefined(arg0),
        }
    }
    #[must_use]
    pub fn pat_array_move_var(arg0: impl Data) -> Self {
        match arg0.data_type() {
            DataType::Acc(arg0) => Self::PatArrayMoveVarAcc(arg0),
            DataType::Const(arg0) => Self::PatArrayMoveVarConst(arg0),
            DataType::Reg(arg0) => Self::PatArrayMoveVarReg(arg0),
            DataType::Stack(arg0) => Self::PatArrayMoveVarStack(arg0),
            DataType::Var(arg0) => Self::PatArrayMoveVarVar(arg0),
            DataType::F32(arg0) => Self::PatArrayMoveVarF32(arg0),
            DataType::I32(arg0) => Self::PatArrayMoveVarI32(arg0),
            DataType::U32(arg0) => Self::PatArrayMoveVarU32(arg0),
            DataType::Boolean(arg0) => Self::PatArrayMoveVarBool(arg0),
            DataType::Null(arg0) => Self::PatArrayMoveVarNull(arg0),
            DataType::Undefined(arg0) => Self::PatArrayMoveVarUndefined(arg0),
        }
    }
}
