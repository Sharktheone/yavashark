Add(Data, Data) => Data
Sub(Data, Data) => Data
Mul(Data, Data) => Data
Div(Data, Data) => Data
Mod(Data, Data) => Data

LNot(Data) => Data
LOr(Data, Data) => Data
LAnd(Data, Data) => Data

BXor(Data, Data) => Data
BOr(Data, Data) => Data
BAnd(Data, Data) => Data

Eq(Data, Data) => Data
Ne(Data, Data) => Data
StrictEq(Data, Data) => Data
StrictNe(Data, Data) => Data
Lt(Data, Data) => Data
LtEq(Data, Data) => Data
Gt(Data, Data) => Data
GtEq(Data, Data) => Data

LShift(Data, Data) => Data
RShift(Data, Data) => Data
ZeroFillRShift(Data, Data) => Data

In(Data, Data) => Data
InstanceOf(Data, Data) => Data

Exp(Data, Data) => Data
NullishCoalescing(Data, Data) => Data

Dec(Data) => Data
Inc(Data) => Data

PushScope
PopScope

Call(Data) => Data
CallMember(Data, Data) => Data

PushCall(Data)
SpreadCall(Data)

Jmp(JmpAddr)
JmpIf(Data, JmpAddr)
JmpIfNot(Data, JmpAddr)
JmpIfNull(Data, JmpAddr)
JmpIfNotNull(Data, JmpAddr)
JmpIfUndefined(Data, JmpAddr)
JmpIfNotUndefined(Data, JmpAddr)
JmpIfNullish(Data, JmpAddr)
JmpIfNotNullish(Data, JmpAddr)

JmpRel(JmpOffset)
JmpIfRel(Data, JmpOffset)
JmpIfNotRel(Data, JmpOffset)
JmpIfNullRel(Data, JmpOffset)
JmpIfNotNullRel(Data, JmpOffset)
JmpIfUndefinedRel(Data, JmpOffset)
JmpIfNotUndefinedRel(Data, JmpOffset)
JmpIfNullishRel(Data, JmpOffset)
JmpIfNotNullishRel(Data, JmpOffset) 

JmpIfEq(Data, Data, JmpAddr)
JmpIfNe(Data, Data, JmpAddr)
JmpIfStrictEq(Data, Data, JmpAddr)
JmpIfStrictNe(Data, Data, JmpAddr)
JmpIfLt(Data, Data, JmpAddr)
JmpIfLtEq(Data, Data, JmpAddr)
JmpIfGt(Data, Data, JmpAddr)
JmpIfGtEq(Data, Data, JmpAddr)

JmpIfEqRel(Data, Data, JmpOffset)
JmpIfNeRel(Data, Data, JmpOffset)
JmpIfStrictEqRel(Data, Data, JmpOffset)
JmpIfStrictNeRel(Data, Data, JmpOffset)
JmpIfLtRel(Data, Data, JmpOffset)
JmpIfLtEqRel(Data, Data, JmpOffset)
JmpIfGtRel(Data, Data, JmpOffset)
JmpIfGtEqRel(Data, Data, JmpOffset)

LoadMember(Data, Data) => Data
LoadVar(Data) => Data

TypeOf(Data) => Data

Push(Data)
Pop
PopN(u32)
PopTo => Data
Move(Data) => Data
Return
ReturnValue(Data)

Break
BreakLabel(Label)
Continue
ContinueLabel(Label)

Throw(Data)
This => Data

Yield(Data)
Await(Data)

Debugger

With(Data)

EnterTry(TryIdx)
LeaveTry
